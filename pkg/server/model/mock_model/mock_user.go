// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	sql "database/sql"
	model "game-gacha/pkg/server/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockUserRepositoryInterface) InsertUser(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).InsertUser), user)
}

// SelectUserByAuthToken mocks base method.
func (m *MockUserRepositoryInterface) SelectUserByAuthToken(authToken string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByAuthToken", authToken)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByAuthToken indicates an expected call of SelectUserByAuthToken.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUserByAuthToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByAuthToken", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUserByAuthToken), authToken)
}

// SelectUserByPK mocks base method.
func (m *MockUserRepositoryInterface) SelectUserByPK(userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByPK", userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByPK indicates an expected call of SelectUserByPK.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUserByPK(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByPK", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUserByPK), userID)
}

// SelectUserByPKForUpdate mocks base method.
func (m *MockUserRepositoryInterface) SelectUserByPKForUpdate(tx *sql.Tx, userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByPKForUpdate", tx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByPKForUpdate indicates an expected call of SelectUserByPKForUpdate.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUserByPKForUpdate(tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByPKForUpdate", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUserByPKForUpdate), tx, userID)
}

// SelectUsersOrderByHighScore mocks base method.
func (m *MockUserRepositoryInterface) SelectUsersOrderByHighScore(startPosition, limit int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersOrderByHighScore", startPosition, limit)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersOrderByHighScore indicates an expected call of SelectUsersOrderByHighScore.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUsersOrderByHighScore(startPosition, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersOrderByHighScore", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUsersOrderByHighScore), startPosition, limit)
}

// UpdateUserByPK mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserByPK(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByPK", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByPK indicates an expected call of UpdateUserByPK.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserByPK(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByPK", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserByPK), user)
}

// UpdateUserCoinByPK mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserCoinByPK(tx *sql.Tx, coin int, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoinByPK", tx, coin, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoinByPK indicates an expected call of UpdateUserCoinByPK.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserCoinByPK(tx, coin, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoinByPK", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserCoinByPK), tx, coin, userID)
}
