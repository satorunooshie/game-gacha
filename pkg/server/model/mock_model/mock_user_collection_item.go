// Code generated by MockGen. DO NOT EDIT.
// Source: user_collection_item.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	sql "database/sql"
	model "game-gacha/pkg/server/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserCollectionItemRepositoryInterface is a mock of UserCollectionItemRepositoryInterface interface.
type MockUserCollectionItemRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserCollectionItemRepositoryInterfaceMockRecorder
}

// MockUserCollectionItemRepositoryInterfaceMockRecorder is the mock recorder for MockUserCollectionItemRepositoryInterface.
type MockUserCollectionItemRepositoryInterfaceMockRecorder struct {
	mock *MockUserCollectionItemRepositoryInterface
}

// NewMockUserCollectionItemRepositoryInterface creates a new mock instance.
func NewMockUserCollectionItemRepositoryInterface(ctrl *gomock.Controller) *MockUserCollectionItemRepositoryInterface {
	mock := &MockUserCollectionItemRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserCollectionItemRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCollectionItemRepositoryInterface) EXPECT() *MockUserCollectionItemRepositoryInterfaceMockRecorder {
	return m.recorder
}

// SaveUserCollectionItems mocks base method.
func (m *MockUserCollectionItemRepositoryInterface) SaveUserCollectionItems(tx *sql.Tx, newItemIDs []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserCollectionItems", tx, newItemIDs, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserCollectionItems indicates an expected call of SaveUserCollectionItems.
func (mr *MockUserCollectionItemRepositoryInterfaceMockRecorder) SaveUserCollectionItems(tx, newItemIDs, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserCollectionItems", reflect.TypeOf((*MockUserCollectionItemRepositoryInterface)(nil).SaveUserCollectionItems), tx, newItemIDs, userID)
}

// SelectUserCollectionItems mocks base method.
func (m *MockUserCollectionItemRepositoryInterface) SelectUserCollectionItems(userID string) ([]*model.UserCollectionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserCollectionItems", userID)
	ret0, _ := ret[0].([]*model.UserCollectionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserCollectionItems indicates an expected call of SelectUserCollectionItems.
func (mr *MockUserCollectionItemRepositoryInterfaceMockRecorder) SelectUserCollectionItems(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserCollectionItems", reflect.TypeOf((*MockUserCollectionItemRepositoryInterface)(nil).SelectUserCollectionItems), userID)
}
